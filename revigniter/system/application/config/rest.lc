<?rev
put gBASEPATH into gBASEPATH

if gBASEPATH is "gBASEPATH" then
	put "No direct script access allowed."
	exit to top
end if


/*
|--------------------------------------------------------------------------
| HTTP protocol
|--------------------------------------------------------------------------
|
| Set to force the use of HTTPS for REST API calls
|
*/
put FALSE into gConfig["force_https"]

/*
|--------------------------------------------------------------------------
| REST Output Format
|--------------------------------------------------------------------------
|
| The default format of the response
|
| 'csv':        NOT IMPLEMENTED Comma separated file
| 'json':       Uses LC8 jsonExport
| 'html'        NOT IMPLEMENTED HTML using the table library in revIgniter
| 'lson':       Uses arrayEncode
| 'xml':        NOT IMPLEMENTED
|
*/
put "json" into gConfig["rest_default_format"]

/*
|--------------------------------------------------------------------------
| REST Supported Output Formats
|--------------------------------------------------------------------------
|
| The following setting contains a list of the supported/allowed formats.
| You may remove those formats that you don't want to use.
| If the default format gConfig["rest_default_format"] is missing within
| gConfig["rest_supported_formats"], json will be used.
|
*/
//put "json, lson, csv, html, xml" into gConfig["rest_supported_formats"]
put "json, lson" into gConfig["rest_supported_formats"]


/*
|--------------------------------------------------------------------------
| REST Status Field Name
|--------------------------------------------------------------------------
|
| The field name for the status inside the response
|
*/
put "status" into gConfig["rest_status_field_name"]

/*
|--------------------------------------------------------------------------
| REST Message Field Name
|--------------------------------------------------------------------------
|
| The field name for the message inside the response
|
*/
put "error" into gConfig["rest_message_field_name"]

/*
|--------------------------------------------------------------------------
| Enable Emulate Request
|--------------------------------------------------------------------------
|
| Should we enable emulation of the request (e.g. used in Mootools request)
|
*/
put TRUE into gConfig["enable_emulate_request"]

/*
|--------------------------------------------------------------------------
| REST Realm
|--------------------------------------------------------------------------
|
| Name of the password protected REST API displayed on login dialogs
|
| e.g: My Secret REST API
|
*/
put "REST API" into gConfig["rest_realm"]

/*
|--------------------------------------------------------------------------
| REST Login
|--------------------------------------------------------------------------
|
| Set to specify the REST API requires to be logged in
|
| FALSE     No login required
| 'basic'   Unsecure login
| 'digest'  More secure login
| 'session' Check for a PHP session variable. See 'auth_source' to set the
|           authorization key
|
*/
put FALSE into gConfig["rest_auth"]

/*
|--------------------------------------------------------------------------
| REST Login Source
|--------------------------------------------------------------------------
|
| Is login required and if so, the user store to use
|
| ""        Use config based users or wildcard testing
| "ldap"    Use LDAP authentication
| "library" Use a authentication library
|
| Note: If 'rest_auth' is set to 'session' then change 'auth_source' to 
| the name of the session variable
|
*/
put "ldap" into gConfig["auth_source"]

/*
|--------------------------------------------------------------------------
| Allow Authentication and API Keys
|--------------------------------------------------------------------------
|
| Where you wish to have Basic, Digest or Session login, but also want 
| to use API Keys (for limiting requests etc), set to TRUE;
|
*/
put TRUE into gConfig["allow_auth_and_keys"]

/*
|--------------------------------------------------------------------------
| REST Login Class and Function
|--------------------------------------------------------------------------
|
| If library authentication is used define the class and function name
|
| The function should accept two parameters: class->function($username, $password)
| In other cases override the function _perform_library_auth in your controller
|
| For digest authentication the library function should return already a stored
| md5(username:restrealm:password) for that username
|
| e.g: md5('admin:REST API:1234') = '1e957ebc35631ab22d5bd6526bd14ea2'
|
*/
##$config['auth_library_class'] = '';
##$config['auth_library_function'] = '';

/*
|--------------------------------------------------------------------------
| Override auth types for specific class/method
|--------------------------------------------------------------------------
|
| Set specific authentication types for methods within a class (controller)
|
| Set as many config entries as needed.  Any methods not set will use the 
| default 'rest_auth' config value.
|
| e.g:
|
|     put "none" into gConfig["auth_override_class_method"]["deals"]["view"]
|     put "digest" into gConfig["auth_override_class_method"]["deals"]["insert"]
|     put "basic" into gConfig["auth_override_class_method"]["accounts"]["user"]
|     put "none|digest|basic" into gConfig["auth_override_class_method"]["dashboard"]["*"]
|
| Here "deals", "accounts" and "dashboard" are controller names, "view", "insert" and "user"
| are methods within. An asterisk may also be used to specify an authentication method for an
| entire classes methods.
|
| Ex: put "basic" into gConfig["auth_override_class_method"]["dashboard"]["*"]
| (NOTE: leave off the "_get" or "_post" from the end of the method name)
|
| Acceptable values are; "none", "digest" and "basic".
|
*/
//put "none" into gConfig["auth_override_class_method"]["deals"]["view"]
//put "digest" into gConfig["auth_override_class_method"]["deals"]["insert"]
//put "basic" into gConfig["auth_override_class_method"]["accounts"]["user"]
//put "none|digest|basic" into gConfig["auth_override_class_method"]["dashboard"]["*"]


// ---Uncomment list line for the wildard unit test
// put "basic" into gConfig["auth_override_class_method"]["wildcard_test_cases"]["*"]

/*
|--------------------------------------------------------------------------
| Override auth types for specfic 'class/method/HTTP method'
|--------------------------------------------------------------------------
|
| example:
|
|        put "none" into gConfig["auth_override_class_method_http"]["deals"]["view"]["get"]
|        put "none" into gConfig["auth_override_class_method_http"]["deals"]["insert"]["post"]
|        put "none" into gConfig["auth_override_class_method_http"]["deals"]["*"]["options"]
*/

// ---Uncomment list line for the wildard unit test
// put "basic" into gConfig["auth_override_class_method_http"]["deals"]["*"]["options"]

/*
|--------------------------------------------------------------------------
| REST Login Usernames
|--------------------------------------------------------------------------
|
| Array of usernames and passwords for login, if ldap is configured this is ignored
|
*/
//put "ABCD" into gConfig["rest_valid_logins"]["user1"]
put "1234" into gConfig["rest_valid_logins"]["admin"]

/*
|--------------------------------------------------------------------------
| Global IP Whitelisting
|--------------------------------------------------------------------------
|
| Limit connections to your REST server to whitelisted IP addresses
|
| Usage:
| 1. Set to TRUE and select an auth option for extreme security (client's IP
|    address must be in whitelist and they must also log in)
| 2. Set to TRUE with auth set to FALSE to allow whitelisted IPs access with no login
| 3. Set to FALSE but set "auth_override_class_method" to "whitelist" to
|    restrict certain methods to IPs in your whitelist
|
*/
put FALSE into gConfig["rest_ip_whitelist_enabled"]

/*
|--------------------------------------------------------------------------
| REST IP Whitelist
|--------------------------------------------------------------------------
|
| Limit connections to your REST server with a comma separated
| list of IP addresses
|
| e.g: "123.456.789.0, 987.654.32.1"
|
| 127.0.0.1 and 0.0.0.0 are allowed by default
|
*/
put "" into gConfig["rest_ip_whitelist"]

/*
|--------------------------------------------------------------------------
| Global IP Blacklisting
|--------------------------------------------------------------------------
|
| Prevent connections to the REST server from blacklisted IP addresses
|
| Usage:
| 1. Set to TRUE and add any IP address to "rest_ip_blacklist"
|
*/
put FALSE into gConfig["rest_ip_blacklist_enabled"]

/*
|--------------------------------------------------------------------------
| REST IP Blacklist
|--------------------------------------------------------------------------
|
| Prevent connections from the following IP addresses
|
| e.g: "123.456.789.0, 987.654.32.1"
|
*/
put "" into gConfig["rest_ip_blacklist"]


/*
|--------------------------------------------------------------------------
| REST Database Group
|--------------------------------------------------------------------------
|
| Connect to a database group for keys, logging, etc. It will only connect
| if you have any of these features enabled
|
*/
put "default" into gConfig["rest_database_group"]

/*
|--------------------------------------------------------------------------
| REST API Keys Table Name
|--------------------------------------------------------------------------
|
| The table name in your database that stores API keys
|
*/
put "keys" into gConfig["rest_keys_table"]

/*
|--------------------------------------------------------------------------
| REST Enable Keys
|--------------------------------------------------------------------------
|
| When set to TRUE, the REST API will look for a column name called 'key'.
| If no key is provided, the request will result in an error. To override the
| column name see "rest_key_column"
|
| Default table schema:
|   CREATE TABLE `keys` (
|       `id` INT(11) NOT NULL AUTO_INCREMENT,
|       `user_id` INT(11) NOT NULL,
|       `key` VARCHAR(40) NOT NULL,
|       `level` INT(2) NOT NULL,
|       `ignore_limits` TINYINT(1) NOT NULL DEFAULT '0',
|       `is_private_key` TINYINT(1)  NOT NULL DEFAULT '0',
|       `ip_addresses` TEXT NULL DEFAULT NULL,
|       `date_created` INT(11) NOT NULL,
|       PRIMARY KEY (`id`)
|   ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
|
*/
put FALSE into gConfig["rest_enable_keys"]

/*
|--------------------------------------------------------------------------
| REST Table Key Column Name
|--------------------------------------------------------------------------
|
| If not using the default table schema in "rest_enable_keys", specify the
| column name to match e.g. my_key
|
*/
put "key" into gConfig["rest_key_column"]

/*
|--------------------------------------------------------------------------
| REST API Limits method
|--------------------------------------------------------------------------
|
| Specify the method used to limit the API calls
|
| Available methods are :
| IP_ADDRESS -- Put a limit per ip address
| API_KEY -- Put a limit per api key
| METHOD_NAME -- Put a limit on method calls
| ROUTED_URL' -- Put a limit on the routed URL
|
*/
put "ROUTED_URL" into gConfig["rest_limits_method"]

/*
|--------------------------------------------------------------------------
| REST Key Length
|--------------------------------------------------------------------------
|
| Length of the created keys. Check your default database schema on the
| maximum length allowed
|
| Note: The maximum length is 40
|
*/
put 40 into gConfig["rest_key_length"]

/*
|--------------------------------------------------------------------------
| REST API Key Variable
|--------------------------------------------------------------------------
|
| Custom header to specify the API key

| Note: Custom headers with the X- prefix are deprecated as of
| 2012/06/12. See RFC 6648 specification for more details
|
*/
put "X-API-KEY" into gConfig["rest_key_name"]

/*
|--------------------------------------------------------------------------
| REST Enable Logging
|--------------------------------------------------------------------------
|
| When set to TRUE, the REST API will log actions based on the column names 'key', 'date',
| 'time' and 'ip_address'. This is a general rule that can be overridden in the
| $this->method array for each controller
|
| Default table schema:
|   CREATE TABLE `logs` (
|       `id` INT(11) NOT NULL AUTO_INCREMENT,
|       `uri` VARCHAR(255) NOT NULL,
|       `method` VARCHAR(6) NOT NULL,
|       `params` TEXT DEFAULT NULL,
|       `api_key` VARCHAR(40) NOT NULL,
|       `ip_address` VARCHAR(45) NOT NULL,
|       `time` INT(11) NOT NULL,
|       `rtime` FLOAT DEFAULT NULL,
|       `authorized` VARCHAR(1) NOT NULL,
|       `response_code` smallint(3) DEFAULT '0',
|       PRIMARY KEY (`id`)
|   ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
|
*/
put FALSE into gConfig["rest_enable_logging"]

/*
|--------------------------------------------------------------------------
| REST API Logs Table Name
|--------------------------------------------------------------------------
|
| If not using the default table schema in "rest_enable_logging", specify the
| table name to match e.g. my_logs
|
*/
put "logs" into gConfig["rest_logs_table"]

/*
|--------------------------------------------------------------------------
| REST Method Access Control
|--------------------------------------------------------------------------
| When set to TRUE, the REST API will check the access table to see if
| the API key can access that controller. "rest_enable_keys" must be enabled
| to use this
|
| Default table schema:
|   CREATE TABLE `access` (
|       `id` INT(11) unsigned NOT NULL AUTO_INCREMENT,
|       `key` VARCHAR(40) NOT NULL DEFAULT '',
|       `all_access` TINYINT(1) NOT NULL DEFAULT '0',
|       `controller` VARCHAR(50) NOT NULL DEFAULT '',
|       `date_created` DATETIME DEFAULT NULL,
|       `date_modified` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
|       PRIMARY KEY (`id`)
|    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
|
*/
put FALSE into gConfig["rest_enable_access"]

/*
|--------------------------------------------------------------------------
| REST API Access Table Name
|--------------------------------------------------------------------------
|
| If not using the default table schema in "rest_enable_access", specify the
| table name to match e.g. my_access
|
*/
put "access" into gConfig["rest_access_table"]

/*
|--------------------------------------------------------------------------
| REST API Param Log Format
|--------------------------------------------------------------------------
|
| When set to TRUE, the REST API log parameters will be stored in the database as JSON
| Set to FALSE to log as LSON <--UP FOR DEBATE
|
*/
put FALSE into gConfig["rest_logs_json_params"]

/*
|--------------------------------------------------------------------------
| REST Enable Limits
|--------------------------------------------------------------------------
|
| When set to TRUE, the REST API will count the number of uses of each method
| by an API key each hour. This is a general rule that can be overridden in the
| $this->method array in each controller
|
| Default table schema:
|   CREATE TABLE `limits` (
|       `id` INT(11) NOT NULL AUTO_INCREMENT,
|       `uri` VARCHAR(255) NOT NULL,
|       `count` INT(10) NOT NULL,
|       `hour_started` INT(11) NOT NULL,
|       `api_key` VARCHAR(40) NOT NULL,
|       PRIMARY KEY (`id`)
|   ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
|
| To specify the limits within a controller, add per-method
| limits with:
|
|      put [NUM_REQUESTS_PER_HOUR] into gConfig["METHOD_NAME"]["limit"]
|
| See application/controllers/api/example.lc for examples
*/
put FALSE into gConfig["rest_enable_limits"]

/*
|--------------------------------------------------------------------------
| REST API Limits Table Name
|--------------------------------------------------------------------------
|
| If not using the default table schema in "rest_enable_limits", specify the
| table name to match e.g. my_limits
|
*/
put "limits" into gConfig["rest_limits_table"]

/*
|--------------------------------------------------------------------------
| REST Ignore HTTP Accept
|--------------------------------------------------------------------------
|
| Set to TRUE to ignore the HTTP Accept and speed up each request a little.
| Only do this if you are using the $this->rest_format or /format/xml in URLs
|
*/
put FALSE into gConfig["rest_ignore_http_accept"]

/*
|--------------------------------------------------------------------------
| REST AJAX Only
|--------------------------------------------------------------------------
|
| Set to TRUE to allow AJAX requests only. Set to FALSE to accept HTTP requests
|
| Note: If set to TRUE and the request is not AJAX, a 505 response with the
| error message 'Only AJAX requests are accepted.' will be returned.
|
| Hint: This is good for production environments
|
*/
put FALSE into gConfig["rest_ajax_only"]

/*
|--------------------------------------------------------------------------
| REST Language File
|--------------------------------------------------------------------------
|
| Language file to load from the language directory
|
*/
put "english" into gConfig["rest_language"]

/*
|--------------------------------------------------------------------------
| CORS Check
|--------------------------------------------------------------------------
|
| Set to TRUE to enable Cross-Origin Resource Sharing (CORS). Useful if you
| are hosting your API on a different domain from the application that
| will access it through a browser
|
*/
put FALSE into gConfig["check_cors"]

/*
|--------------------------------------------------------------------------
| CORS Allowable Headers
|--------------------------------------------------------------------------
|
| If using CORS checks, set the allowable headers here
|
*/
put "Origin, X-Requested-With, Content-Type, Accept, Access-Control-Request-Method" into gConfig["allowed_cors_headers"]

/*
|--------------------------------------------------------------------------
| CORS Allowable Methods
|--------------------------------------------------------------------------
|
| If using CORS checks, you can set the methods you want to be allowed
|
*/
put "GET, POST, OPTIONS, PUT, PATCH, DELETE" into gConfig["allowed_cors_methods"]

/*
|--------------------------------------------------------------------------
| CORS Allow Any Domain
|--------------------------------------------------------------------------
|
| Set to TRUE to enable Cross-Origin Resource Sharing (CORS) from any
| source domain
|
*/
put FALSE into gConfig["allow_any_cors_domain"]

/*
|--------------------------------------------------------------------------
| CORS Allowable Domains
|--------------------------------------------------------------------------
|
| Used if gConfig["check_cors"] is set to TRUE and gConfig["allow_any_cors_domain"]
| is set to FALSE. Set all the allowable domains within the array as follows:
|
| e.g. 
|
|      put "http" into gConfig["allowed_origins"]["www.example.com"]
|      put "https" into gConfig["allowed_origins"]["spa.example.com"]
*/
put "" into gConfig["allowed_cors_origins"]
