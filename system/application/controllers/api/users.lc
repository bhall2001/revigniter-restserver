<?rev
put gBASEPATH into gBASEPATH

if gBASEPATH is "gBASEPATH" then
	put "No direct script access allowed."
	exit to top
end if

// This can be removed if you use autoload in config.lc
require gAPPPATH . '/libraries/RestController.lc';

// PUT ALL HANDLER NAMES WHICH ARE LIKELY TO SERVE AS URI SEGMENTS
// INTO THE GLOBAL gControllerHandlers AS A COMMA SEPARATED LIST
put "users_get" into gControllerHandlers


------------------------------------------------------------------------
-- This is an example of a few basic user interaction methods you could use
-- all done with a hardcoded array
--
-- @package         revIgniter
-- @subpackage      Rest Server
-- @category        Controller
-- @author          Bob Hall
-- @license         APACHE 2.0
-- @link            https://github.com/bhall2001/revigniter-restserver/
 ------------------------------------------------------------------------

// Configure limits on our controller methods
// Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
put 500 into sMethodsA["users_get"]["limit"]   // 500 requests per hour per user/key
put 100 into sMethodsA["users_post"]["limit"]  // 100 requests per hour per user/key
put 50 into sMethodsA["users_delete"]["limit"] // 50 requests per hour per user/key
   
function users_get
        // Users from a data store e.g. database
        // using a hard coded array for example
        put "John" into tUsersA[1]["name"]
        put "john@example.com" into tUsersA[1]["email"]
        put "Loves coding" into tUsersA[1]["fact"]
        
        put "Jim" into tUsersA[2]["name"]
        put "jim@example.com" into tUsersA[2]["email"]
        put "Developed on Revigniter" into tUsersA[2]["fact"]

        put "Jane" into tUsersA[3]["name"]
        put "jane@example.com" into tUsersA[3]["email"]
        put "Lives in the USA" into tUsersA[3]["fact"]
        
        //$id = $this->get('id');

        // If the id parameter doesn't exist return all the users

        if sGetA["id"] = "" then
            // Check if the users data store contains users (in case the database result returns NULL)
            if tUsersA is an array then
                // Set the response and exit
                restResponse(tUsersA, HTTP_OK); // OK (200) being the HTTP response code
            else
                // Set the response and exit
                
                put false into tResponseA["status"]
                put "No users were found" into tResponseA["message"]
                restResponse(tResponseA, HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            end if
        else
/*
        // Find and return a single record for a particular user.

        $id = (int) $id;

        // Validate the id.
        if ($id <= 0)
        {
            // Invalid id, set the response and exit.
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Get the user from the array, using the id as key for retreival.
        // Usually a model is to be used for this.

        $user = NULL;

        if (!empty($users))
        {
            foreach ($users as $key => $value)
            {
                if (isset($value['id']) && $value['id'] === $id)
                {
                    $user = $value;
                }
            }
        }

        if (!empty($user))
        {
            $this->set_response($user, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                'status' => FALSE,
                'message' => 'User could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
        */
     end if
end usersGet

/*
    public function users_post()
    {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function users_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

*/
